Реализовать простейший текстовый квест.
Написать программу, в которой обрабатываются личные данные сотрудников некой компании.
Необходимо реализовать иерархию классов, относящихся к игровым сущностям.
Реализовать иерархию классов в коде.
Перевести методы расчёта DPS и получения урона персонажем в статический класс GameLogic, который изначально не изображали на иерархии, но после добавления обновили схему.
Сделать заготовку для “магической” системы.
Создать интерфейс стихий, который будет реализовываться различными способами для огня, воздуха, воды, мороза, земли и эфира.
Для придания иллюзии “живой” игры, необходимо сделать так, чтобы некоторые действия происходили параллельно, пока игрок продвигается по миру.
Стоит задача внедрить многопоточность.
Заселить игру существами, которые могут передвигаться независимо от действий пользователя.
Сделать иерархию игровых объектов, начиная с GameObject и заканчивая Weapon и Mob.
Сделать класс GameLogic со статическими методами для обработки различных игровых систем (DPS, бой, генерация оружия и т.д).
Сделать игровое поле в виде 2D массива символов, где каждый объект имеет свою позицию.
Сделать игровой цикл, который выполняется, пока игрок жив или пока не убиты все мобы на карте.
Добавить автоматическое исцеление при помощи зелья.
Реализовать “базу” на которую персонаж возвращается после убийства всех мобов на карте.
Описать структуру данных класса Character, взяв за основу описание характеристик персонажей в Genshin Impact.
Создать динамический массив из объектов данного класса, и заполнить не менее 15-20 элементами.
Вывести персонажа с максимальным количеством HP среди всех.
Вывести персонажа с минимальным количеством HP среди всех.
Сортировать персонажей по силе атаки, выбрать только тех, у кого она меньше 100. Вывести на экран.
Произвести выборку персонажей по одному типу архонта/специализации и для всех изменить произвольную характеристику умножив её значение на 2. Выборку собрать в коллекцию List и вывести на экран.
Найти персонажа со значением характеристики силы атаки в 1337.
Посчитать для каждой специализации количество персонажей. Вывести на экран в виде таблички.
Описать структуру данных класса Worker (работник) некой компании.
Динамический массив из объектов данного класса, и заполнить не менее 15-20 элементами.
Вывести работника с максимальной зп среди всех.
Вывести работника с минимальной зп среди всех.
Сортировать работников по возрасту, выбрать только тех, у кого он меньше 50. Вывести на экран тех, у кого есть кот.
Произвести выборку работников по одному отделу и для всех изменить премию умножив её значение на 2.
Найти работника со значением суммы зарплаты + премии больше или равно 100к.
Посчитать для каждого отдела количество работников.
Написать программу в которой бы обратывались исключения.